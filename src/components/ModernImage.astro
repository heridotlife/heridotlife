---
/**
 * Modern Image Component
 * Serves images in modern formats (WebP/AVIF) with automatic fallbacks
 * Leverages Astro's built-in image optimization
 */
import { Image } from 'astro:assets';
import type { ImageMetadata } from 'astro';

interface Props {
  src: string | ImageMetadata;
  alt: string;
  width?: number;
  height?: number;
  loading?: 'lazy' | 'eager';
  fetchpriority?: 'high' | 'low' | 'auto';
  class?: string;
  formats?: ('avif' | 'webp' | 'png' | 'jpg')[];
  quality?: number;
}

const {
  src,
  alt,
  width,
  height,
  loading = 'lazy',
  fetchpriority = 'auto',
  class: className,
  formats = ['avif', 'webp'],
  quality = 80,
} = Astro.props;

// For local images imported via Astro's Image component
const isLocalImage = typeof src !== 'string';
---

{
  isLocalImage ? (
    <Image
      src={src}
      alt={alt}
      width={width}
      height={height}
      loading={loading}
      fetchpriority={fetchpriority}
      class={className}
      format="webp"
      quality={quality}
    />
  ) : (
    <picture>
      {/* AVIF format - best compression */}
      {formats.includes('avif') && (
        <source srcset={src.replace(/\.(jpg|jpeg|png)$/i, '.avif')} type="image/avif" />
      )}

      {/* WebP format - good compression, wide support */}
      {formats.includes('webp') && (
        <source srcset={src.replace(/\.(jpg|jpeg|png)$/i, '.webp')} type="image/webp" />
      )}

      {/* Fallback to original format */}
      <img
        src={src}
        alt={alt}
        width={width}
        height={height}
        loading={loading}
        fetchpriority={fetchpriority}
        class={className}
      />
    </picture>
  )
}
